// Based on stylus angled Edges v2.0
// https://github.com/OlegWock/stylus-angled-edges
// https://github.com/josephfusco/angled-edges

ae-str-replace(text, search, replace = '')
    replace(search, replace, text)

ae-svg-encode(text)
    result = ae-str-replace(text, '<svg', "<svg xmlns='http://www.w3.org/2000/svg'")
    result = ae-str-replace(result, '%', '%25')
    result = ae-str-replace(result, '"', '%22')
    result = ae-str-replace(result, "'", '%27')
    result = ae-str-replace(result, ' ', '%20')
    result = ae-str-replace(result, '<', '%3C')
    result = ae-str-replace(result, '>', '%3E')
    'data:image/svg+xml,' + result


ae-pseudo(wedge, height, width = null)
    background-image url("" + wedge)
    background-position center center
    background-repeat no-repeat

    if width == null
        background-size 100% 100%

    content ''
    height height * 1px
    left 0
    position absolute
    right 0
    width 100%
    z-index 1

angled-edge(location, hypotenuse, fill, height = 100, width = null)
    position relative

    // polygon points for right triangle
    points = {}
    if width
        points["upper left"] = s("0,%s %s,%s %s,0", height, width, height, width)
        points["upper right"] = s("0,%s %s,%s 0,0", height, width, height)
        points["lower left"] = s("0,0 %s,%s %s,0", width, height, width)
        points["lower right"] = s("0,0 %s,0 0,%s", width, height)
    else
        points["upper left"] = s("0,%s 100,%s 100,0", height, height)
        points["upper right"] = s("0,%s 100,%s 0,0", height, height)
        points["lower left"] = s("0,0 100,%s 100,0", height)
        points["lower right"] = s("0,0 100,0 0,%s", height)

    // ensure fill color is using rgb()
    fill-rgb = 'rgb(' + red(fill) + ',' + green(fill) + ',' + blue(fill) + ')'

    // capture alpha component of fill to use with fill-opacity
    fill-alpha = alpha(fill)

    wedge = s('<svg width="%s" height="%s" fill=%s fill-opacity="%s"><polygon points="%s"></polygon></svg>', width, height, fill-rgb, fill-alpha, points[hypotenuse])

    if width == null
        wedge = s('<svg preserveAspectRatio="none" viewBox="0 0 100 %s" fill=%s fill-opacity="%s"><polygon points="%s"></polygon></svg>', height, fill-rgb, fill-alpha, points[hypotenuse])

    encoded-wedge = ae-svg-encode(wedge)

    if location == 'inside top'
        &::before
            ae-pseudo(encoded-wedge, height, width)
            top 0

    else if location == 'outside top'
        &::before
            ae-pseudo(encoded-wedge, height, width)
            top ((-1 * height) * 1px)

    else if location == 'inside bottom'
        &::after
            ae-pseudo(encoded-wedge, height, width)
            bottom 0

    else if location == 'outside bottom'
        &::after
            ae-pseudo(encoded-wedge, height)
            bottom ((-1 * height) * 1px)

    else
        error('Invalid argument for location - must use: `inside top`, `outside top`, `inside bottom`, `outside bottom')

    unless points[hypotenuse]
        error('Invalid argument for hypotenuse - must use: `upper left`, `upper right`, `lower left`, `lower right`')
